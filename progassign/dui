#!/usr/bin/perl

###################################Dui
#This script allows the user to enter
#a directory, as well as options on 
#viewing that directory. The script
#allows users to explore the children
#directories and files within the 
#parent directory
#
#Author: Kari Bronson
#Professor: Dr Nicholas Boers
#Due Date: April 5th 2013
###################################

use warnings;
use strict;
use Getopt::Std;
use Data::Dumper; 

#clears buffer
$|=1;
#count totalfiles
my $totalFiles= 0;
#hash used for user entered options
my %opts;
#current path references
my @PathDirRef = ();
#current path name
my @PathDirName = ();
#References of the current Directory displayed
my @currentDirRef = ();
#names of the current directory displayed
my @CurDirNames= ();
#holds original hash from dir
my $ParentDirRef;
#Used for options -gmk
use constant {
    KILO => 1024,
    MEGA => 1048576,
    GIGA => 1073741824,
};

##############################printDir
#Sorting the current directory by size
# printing the results with histogram
sub printDir(@){
    my %originalHash = @_;
    my %sortCurrentDir = @_;
    my $count = 1;
#   solved the -N issue
    my $amount = topNumEntries(%sortCurrentDir);
#   replace the reference with the size
    %sortCurrentDir = replaceWithSize(%sortCurrentDir);
#   print according to file/dir size
    foreach (sort {($sortCurrentDir{$b} <=> $sortCurrentDir{$a})} 
	     keys %sortCurrentDir){
	if($count <= $amount){   
	    next if($_ eq '.');
#           http://stackoverflow.com/questions/3328010
#	    /best-way-to-have-a-formatted-output-with-perl
	    printf "%-4s %-30s %-12s %-20s\n", "$count)",
	        printDirName($_,$originalHash{$_}),
	        requestedFileSize($sortCurrentDir{$_}),
	        histogram($_,%sortCurrentDir);
	    push(@CurDirNames, $_);
	    push (@currentDirRef, $originalHash{$_});
	} 
	$count = $count+1;
    }
}

################################printDirName
#deals with long dir/file names and Indicates 
# a dir by appending /* to its name
sub printDirName($$){
    my ($name, $reference) = @_;
    $name = substr($name,0,27);
    if (ref $reference eq "HASH"){
#	append a /* to directories
	$name = $name . "/*";
    }
    return $name;
}

##################################statInfo
#prints the information stat would give by 
#extracting the information from the array ref
sub statInfo($){
    my $fileInfo= shift @_;
    if(ref $fileInfo eq "ARRAY"){
	print "Device:\t $fileInfo->[0]
inode:\t $fileInfo->[1]
mode:\t $fileInfo->[2]
nlink:\t $fileInfo->[3]
uid:\t ", scalar getpwuid $fileInfo->[4], "
gid:\t ", scalar getgrgid $fileInfo->[5], "
rdev:\t $fileInfo->[6]
size:\t $fileInfo->[7]B
atime:\t ", scalar localtime($fileInfo->[8]), "
mtime:\t ", scalar localtime($fileInfo->[9]), "
ctime:\t ", scalar localtime($fileInfo->[10]), "
blksz:\t $fileInfo->[11]
blocks:\t $fileInfo->[12]
";
    }
}

###############################################openDir
#Only called once. Take command line argument of a Dir,
#opens it and recursivly saves file and Directory infomration
sub openDir{
    my %directoryData;
    my $sum = 0;
    my ($directory)=$_[0];
    opendir my $dh, $directory or 
	die "Issues with opening Directory: $!";
    foreach my $file (readdir($dh)){
	if(-d "$directory/$file" && "$file" ne '.' && "$file" ne '..'){
#	    recurse if there is a directory, returns the hash reference
	    $directoryData{$file} = openDir("$directory/$file");
#	    add child directory size to parent directory
	    $sum = $sum + $directoryData{$file}->{'.'};
	    $totalFiles++;
	}elsif(-f "$directory/$file" || -l "$directory/$file"){
	    my @arr = stat "$directory/$file";
	    $directoryData{$file} = \@arr;
	    $sum = dirSum($sum, "$directory/$file");
	    verbose($file);
	}
#	Feedback for the user
	printTotalFiles();
    }
    $directoryData{'.'} = $sum;
    return \%directoryData;
}

##############################options
#%opts holds the command line options
sub options(){
    getopts ("gmkhvN:", \%opts);
}

####################################Help
#usage message then exit if no directory
#usage message without exit with 'H' option
sub Help(){
    if($#ARGV < 0 || defined $opts{H}){
    print "
Usage: dui [options] directory
Options:
-N num\t Display only the top 'num' entries for each directory.
-b\t Display previous directory
-r\t Return to current directory (file viewing)
  \t -=Toggle Options=-
-g\t Display sizes in 1073741824-byte (1-Gbyte) blocks.
-m\t Display sizes in 1048576-byte (1-Mbyte) blocks.
-k\t Display sizes in 1024-byte (1-Kbyte) blocks.
-h\t Display sizes as \"human-readable\" numbers, where
\t all sizes include a suffix to indicate units of
\t bytes or {kilo,mega,giga}bytes.

-v\t Enable verbose/debugging output.
-q\t Quit
";
    if ($#ARGV < 0){
	exit(0);
    }else{
#	Delete so H wont have toggle effect
	delete $opts{'H'};
    }
    }
}

########################topNumEntries
#If N is defined, prints the entered
#amount of directories/files in current dir
sub topNumEntries(@){
    my %subHash = @_;
    my $amount=0;
#   opts{N} = 0, will print out the entire directory
    if (defined $opts{N} && $opts{N} > 0){
	$amount = $opts{N};
    } else {
	$amount= keys %subHash;
    }
    return $amount;
}

##############################replaceWithSize
#Fills the new hash with the appropriate size
sub replaceWithSize(@){
   my %currentDir = @_;
   foreach my $val (keys %currentDir){
#       http://perldoc.perl.org/functions/ref.html
	if(ref $currentDir{$val} eq "HASH"){
	    $currentDir{$val} = $currentDir{$val}->{'.'};
	}elsif (ref $currentDir{$val} eq "ARRAY"){
	    $currentDir{$val} = $currentDir{$val}->[7];
	}
    }
   return %currentDir;
}

##########################################humanReadable
#returns the size with a letter appended that describes 
#the units. -h (byte, kilo, mega, giga)
sub humanReadable($){
    my $size = shift @_;
    if ($size > -1){
#       The smallest unit is used if more then one option is defined
#	Size options can be toggled but will still have smallest preside. 
#	If user enters two sizes at least one will be used
	if (defined $opts{k} && defined $opts{h}){
	    $size = "$size" . "K";
	} elsif (defined $opts{m} && defined $opts{h}){
	    $size = "$size" . "M";
	} elsif (defined $opts{g} && defined $opts{h}){
	    $size = "$size" . "G";
	}elsif (defined $opts{h}){
	    $size = "$size" . "B";
	}
    }
    return $size;
}

###############################requestedFileSize
#Returns the size option user requested -k -m -g
#http://perldoc.perl.org/functions/int.html
sub requestedFileSize($){
    my $sizeInBytes = shift @_;
    if ($sizeInBytes > 0){
#	smallest size presides.
	if (defined $opts{k}){
	    $sizeInBytes= int($sizeInBytes/KILO);
	} elsif (defined $opts{m}){
	    $sizeInBytes= int($sizeInBytes/MEGA);
	} elsif (defined $opts{g}){
	    $sizeInBytes= int($sizeInBytes/GIGA);
	}
    }
    return humanReadable($sizeInBytes);
}

########################verbose
#prints files as they are being
#scanned from open dir -v
sub verbose($){
    if(defined $opts{v}){
	print "@_\n";
    }		    
}

###########################################histogram
#gets the percentage the file/dir contributes to the 
#current dir returns a quantity of #
sub histogram($@){
    my ($val, %histoHash) = @_;
#   get percent of file has then * 20 spots to fill and + 0.5 to round up
    my $histogram = (($histoHash{$val}/$histoHash{'.'})*20)+0.5;
    return "#"x"$histogram";
}

###############################printTotalFiles
#user feedback as to how the scanning is going
#prints every 100 files
sub printTotalFiles{
    if(($totalFiles % 100 == 0 && $totalFiles != 0) || $totalFiles < 100){
	print "\r$totalFiles ";
    }
}

#######################dirSum
#Tracks the current directory 
#size and the total file sum
sub dirSum($$){
    my ($sum, $file) = @_;
    if(defined -s $file){
	$sum = $sum + (-s $file);
	$totalFiles= $totalFiles +1;
    }
    return $sum;
}

#######################################explore
#prints after each Directory or file depending 
#on the current reference being used
sub explorePrint{
    if (ref $PathDirRef[$#PathDirRef] eq "HASH"){
	 print "Explore (H for Help)? ";
	}elsif (ref $PathDirRef[$#PathDirRef] eq "ARRAY"){
	    print "Return (r for return): ";
	}
}

#########################################exploreDirFile
#When user enters a dir/file they would like to explore
#this pushes the reference to that dir/file on the path array
sub ExploreDirFile(){
    if(defined $opts{'explore'}){
	my $requestIndex = ($opts{'explore'})-1;
	if(ref $currentDirRef[$requestIndex] eq "HASH" ||
	    ref $currentDirRef[$requestIndex] eq "ARRAY"){
#	    pathDirRef is used to print the "new" current directory
	    push(@PathDirRef, $currentDirRef[$requestIndex]);  
	    push(@PathDirName, $CurDirNames[$requestIndex]);
	}
    }
#   clear explore to avoid looping
    delete $opts{'explore'};
    @CurDirNames= ();
    @currentDirRef = ();
}

######################stdinOption
#sets all options entered by user
sub StdinOptions($){
    $opts{'explore'}=$1 if(m/^(\d+)/);
    $opts{'b'}='1' if(m/b/);
    $opts{'N'}=$1 if(m/N (\d+)/);
    $opts{'H'}='1' if(m/H/);
    $opts{'r'}='1' if(m/r/);
    $opts{'q'}='1' if(m/q/);
#   gmkh - toggle
    foreach my $var (my @myarray = (m/-?([gmkh])/g)){
	toggleOptions($var);
    }
    specialOptions();
}

############################toggleOptions
#turns these options on and off depending 
#on their current state -g -m -k -h
sub toggleOptions($){
    my $char = shift @_;
    if(defined $opts{$char}){
	delete $opts{$char};
    }else{
	$opts{$char} = '1';
    }
}

################################specialOptions
#will call functions that deal especially with 
#certain optioons like -b -r -q and 'explore'
sub specialOptions(){
#   Directory request
    ExploreDirFile();
#   Back a Directory
    stepBackDir();
#   quit program
    quit();
}

##############quit
# exits program -q
sub quit(){
    if(defined $opts{'q'}){
	exit(0);
    }
}

############################################stepBackDir
#moves back a directory(or the current dir from a file)
# -r -b
sub stepBackDir(){
    if(defined $opts{'b'} || defined $opts{'r'}){
	if( $#PathDirRef > 0){
#           So it doesn't re-scan the initial directory
	    pop @PathDirName;
	    pop @PathDirRef;
	}
    }
    delete $opts{'b'};
    delete $opts{'r'}
}


########################Start Here
#loop of OPTIONS-DISPLAY-STDIN etc.
do{
    options;
    if(defined $_){
	StdinOptions($_);
    }
    Help;
#   If the path is empty  call openDir for the first time 
    if($#PathDirRef == -1){
	print "Scanning $ARGV[0] for files...\n";
	$ParentDirRef = openDir($ARGV[0]);
	push (@PathDirRef, $ParentDirRef);
	push (@PathDirName, $ARGV[0]);
	print "\nDone.\n";
    }	    
#   Prints the path name
    print join("/", @PathDirName), "\n";
#   Prints either the Directory or File
    if (ref $PathDirRef[$#PathDirRef] eq "HASH"){
	printDir(%{$PathDirRef[$#PathDirRef]});
    }elsif (ref $PathDirRef[$#PathDirRef] eq "ARRAY"){
	statInfo($PathDirRef[$#PathDirRef]);
    }
    explorePrint();
}while(<STDIN>);

################################
    
    exit(0);
